using Microsoft.EntityFrameworkCore;
using WebApplication2.Models;

namespace WebApplication2.Services
{
    public class DepartmentDataService : IDataService<Department, int>
    {
        BajajCompanyContext ctx;

        public DepartmentDataService(BajajCompanyContext ctx)
        {
            this.ctx = ctx;
        }

       async Task<Department> IDataService<Department, int>.CreateAsync(Department entity)
        {
            //throw new NotImplementedException();
            var result = await ctx.Departments.AddAsync(entity);
            await ctx.SaveChangesAsync();
            return result.Entity;
        }

      async  Task<Department> IDataService<Department, int>.DeleteAsync(int id)
        {
            // throw new NotImplementedException();
            var rec = await ctx.Departments.FindAsync(id);
            ctx.Departments.Remove(rec);
            await ctx.SaveChangesAsync();
            return rec;

        }

       async Task<IEnumerable<Department>> IDataService<Department, int>.GetAsync()
        {
           // throw new NotImplementedException();
           return await ctx.Departments.ToListAsync();
        }

       async Task<Department> IDataService<Department, int>.GetAsync(int id)
        {
            // throw new NotImplementedException();
            return await ctx.Departments.FindAsync(id);

        }

        async Task<Department> IDataService<Department, int>.UpdateAsync(int id, Department entity)
        {
            //throw new NotImplementedException();
            var rec =await ctx.Departments.FindAsync(id);
            if (rec != null)
            {
                rec.DeptNo = entity.DeptNo;
                rec.DeptName= entity.DeptName;
                rec.Capacity=entity.Capacity;
                rec.Location=entity.Location;
                await ctx.SaveChangesAsync();
                return rec;
            }
            return null;
        }
    }
}
